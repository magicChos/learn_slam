cmake_minimum_required(VERSION 2.8)

project(test)
IF(NOT CMAKE_BUILD_TYPE)
    SET(CMAKE_BUILD_TYPE Release)
ENDIF()

message(STATUS "......")
if (NOT ${CMAKE_VERSION} LESS 3.2)
    set(CMAKE_CXX_STANDARD 11)
    set(CMAKE_CXX_STANDARD_REQUIRED ON)
else ()
    message(STATUS "Checking compiler flags for C++11 support.")
    # Set C++11 support flags for various compilers
    include(CheckCXXCompilerFlag)
    check_cxx_compiler_flag("-std=c++11" COMPILER_SUPPORTS_CXX11)
    check_cxx_compiler_flag("-std=c++0x" COMPILER_SUPPORTS_CXX0X)
    if (COMPILER_SUPPORTS_CXX11)
        message(STATUS "C++11 is supported.")
        if (${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
            set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -stdlib=libc++")
        else ()
            set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
        endif ()
    elseif (COMPILER_SUPPORTS_CXX0X)
        message(STATUS "C++0x is supported.")
        if (${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
            set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x -stdlib=libc++")
        else ()
            set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x")
        endif ()
    else ()
        message(STATUS "The compiler ${CMAKE_CXX_COMPILER} has no C++11 support. Please use a different C++ compiler.")
    endif ()
endif ()

FIND_PACKAGE( OpenMP )
include_directories("/usr/local/eigen3")
include_directories("/usr/local/pcl-1.9")

# pcl
find_package(PCL)
include_directories(${PCL_INCLUDE_DIRS})
link_directories(${PCL_LIBRARY_DIRS})
add_definitions(${PCL_DEFINITIONS})

# include_directories(/Users/han/Deeplearning/libfacedetection/src)
add_executable(possion_reconstruction main.cpp)
# 编译成静态库
#add_library(${PROJECT_NAME} STATIC "main.cpp")
# 编译成动态库
#add_library(${PROJECT_NAME} SHARED "main.cpp")
TARGET_LINK_LIBRARIES(possion_reconstruction LINK_PUBLIC pthread  ${PCL_LIBRARIES})

if(OpenMP_CXX_FOUND)
    target_link_libraries(possion_reconstruction PUBLIC OpenMP::OpenMP_CXX)
endif()
