/** THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
 * BY HAND!!
 *
 * Generated by lcm-gen
 **/

#ifndef __sensor_messages_PointCloud2_hpp__
#define __sensor_messages_PointCloud2_hpp__

#include <lcm/lcm_coretypes.h>

#include <vector>
#include "common_messages/Header.hpp"
#include "sensor_messages/PointField.hpp"

namespace sensor_messages
{

class PointCloud2
{
    public:
        common_messages::Header header;

        /**
         * 2D structure of the point cloud. If the cloud is unordered, height is
         * 1 and width is the length of the point cloud.
         */
        int32_t    height;

        int32_t    width;

        /// Describes the channels and their layout in the binary data blob.
        int32_t    fields_size;

        std::vector< sensor_messages::PointField > fields;

        int8_t     is_bigendian;

        /// Is this data bigendian?
        int32_t    point_step;

        /// Length of a point in bytes
        int32_t    row_step;

        /// Length of a row in bytes
        int32_t    d_size;

        std::vector< int8_t > data;

        /// Actual point data, size is (row_step*height)
        int8_t     is_dense;

    public:
        /**
         * Encode a message into binary form.
         *
         * @param buf The output buffer.
         * @param offset Encoding starts at thie byte offset into @p buf.
         * @param maxlen Maximum number of bytes to write.  This should generally be
         *  equal to getEncodedSize().
         * @return The number of bytes encoded, or <0 on error.
         */
        inline int encode(void *buf, int offset, int maxlen) const;

        /**
         * Check how many bytes are required to encode this message.
         */
        inline int getEncodedSize() const;

        /**
         * Decode a message from binary form into this instance.
         *
         * @param buf The buffer containing the encoded message.
         * @param offset The byte offset into @p buf where the encoded message starts.
         * @param maxlen The maximum number of bytes to read while decoding.
         * @return The number of bytes decoded, or <0 if an error occured.
         */
        inline int decode(const void *buf, int offset, int maxlen);

        /**
         * Retrieve the 64-bit fingerprint identifying the structure of the message.
         * Note that the fingerprint is the same for all instances of the same
         * message type, and is a fingerprint on the message type definition, not on
         * the message contents.
         */
        inline static int64_t getHash();

        /**
         * Returns "PointCloud2"
         */
        inline static const char* getTypeName();

        // LCM support functions. Users should not call these
        inline int _encodeNoHash(void *buf, int offset, int maxlen) const;
        inline int _getEncodedSizeNoHash() const;
        inline int _decodeNoHash(const void *buf, int offset, int maxlen);
        inline static uint64_t _computeHash(const __lcm_hash_ptr *p);
};

int PointCloud2::encode(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;
    int64_t hash = getHash();

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &hash, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->_encodeNoHash(buf, offset + pos, maxlen - pos);
    if (tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int PointCloud2::decode(const void *buf, int offset, int maxlen)
{
    int pos = 0, thislen;

    int64_t msg_hash;
    thislen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &msg_hash, 1);
    if (thislen < 0) return thislen; else pos += thislen;
    if (msg_hash != getHash()) return -1;

    thislen = this->_decodeNoHash(buf, offset + pos, maxlen - pos);
    if (thislen < 0) return thislen; else pos += thislen;

    return pos;
}

int PointCloud2::getEncodedSize() const
{
    return 8 + _getEncodedSizeNoHash();
}

int64_t PointCloud2::getHash()
{
    static int64_t hash = static_cast<int64_t>(_computeHash(NULL));
    return hash;
}

const char* PointCloud2::getTypeName()
{
    return "PointCloud2";
}

int PointCloud2::_encodeNoHash(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;

    tlen = this->header._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->height, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->width, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->fields_size, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    for (int a0 = 0; a0 < this->fields_size; a0++) {
        tlen = this->fields[a0]._encodeNoHash(buf, offset + pos, maxlen - pos);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __boolean_encode_array(buf, offset + pos, maxlen - pos, &this->is_bigendian, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->point_step, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->row_step, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->d_size, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    if(this->d_size > 0) {
        tlen = __int8_t_encode_array(buf, offset + pos, maxlen - pos, &this->data[0], this->d_size);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __boolean_encode_array(buf, offset + pos, maxlen - pos, &this->is_dense, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int PointCloud2::_decodeNoHash(const void *buf, int offset, int maxlen)
{
    int pos = 0, tlen;

    tlen = this->header._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->height, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->width, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->fields_size, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    try {
        this->fields.resize(this->fields_size);
    } catch (...) {
        return -1;
    }
    for (int a0 = 0; a0 < this->fields_size; a0++) {
        tlen = this->fields[a0]._decodeNoHash(buf, offset + pos, maxlen - pos);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __boolean_decode_array(buf, offset + pos, maxlen - pos, &this->is_bigendian, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->point_step, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->row_step, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->d_size, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    if(this->d_size) {
        this->data.resize(this->d_size);
        tlen = __int8_t_decode_array(buf, offset + pos, maxlen - pos, &this->data[0], this->d_size);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __boolean_decode_array(buf, offset + pos, maxlen - pos, &this->is_dense, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int PointCloud2::_getEncodedSizeNoHash() const
{
    int enc_size = 0;
    enc_size += this->header._getEncodedSizeNoHash();
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    for (int a0 = 0; a0 < this->fields_size; a0++) {
        enc_size += this->fields[a0]._getEncodedSizeNoHash();
    }
    enc_size += __boolean_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __int8_t_encoded_array_size(NULL, this->d_size);
    enc_size += __boolean_encoded_array_size(NULL, 1);
    return enc_size;
}

uint64_t PointCloud2::_computeHash(const __lcm_hash_ptr *p)
{
    const __lcm_hash_ptr *fp;
    for(fp = p; fp != NULL; fp = fp->parent)
        if(fp->v == PointCloud2::getHash)
            return 0;
    const __lcm_hash_ptr cp = { p, PointCloud2::getHash };

    uint64_t hash = 0xb62532789d6e948cLL +
         common_messages::Header::_computeHash(&cp) +
         sensor_messages::PointField::_computeHash(&cp);

    return (hash<<1) + ((hash>>63)&1);
}

}

#endif
